{"version":3,"sources":["../../lib/server.js"],"names":["start","debug","_server","httpServer","listen","httpPort","console","log","request","response","unifiedServer","parsingUrl","url","queryStringObject","query","path","pathname","trimmedPath","replace","method","toLowerCase","headers","decoder","stringDecoder","buffer","on","data","write","end","requestData","payload","createResponse","chosenHandler","includes","asset","api","template","statusCode","contentType","setHeader","contentTypes","payloadString","writeHead","showResponseInfos"],"mappings":"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","file":"server.js","sourcesContent":["// Bağımlılıklar\r\nimport { createServer as createHttpServer } from \"http\";\r\nimport { parse as parseUrl } from \"url\";\r\nimport { StringDecoder as stringDecoder } from \"string_decoder\";\r\nimport { JSONtoObject, contentTypes } from \"./helpers/defaults\";\r\nimport { fixPayload, fixStatusCode, fixContentType } from './helpers/fixers';\r\nimport { debuglog } from 'util';\r\nimport { httpPort } from './config';\r\n\r\n// Varsayılan işleyiciler\r\nimport { api } from './handlers/api';\r\nimport { asset } from './handlers/asset';\r\nimport { template } from './handlers/template';\r\n\r\n// Hata ayıklama durumunda iken konsola yazı yazdırma\r\nconst debug = debuglog('server');\r\n\r\n/**\r\n * Sunucu alt işlemleri\r\n */\r\nconst _server = {};\r\n\r\n/**\r\n * Sunucuyu başlatma\r\n */\r\nexport function start() {\r\n    _server.httpServer.listen(httpPort, () => {\r\n        console.log(\"\\x1b[36m%s\\x1b[0m\", `Sunucu ${httpPort} portundan dinleniyor.`);\r\n    });\r\n}\r\n\r\n// HTTP sunucusu oluşturma\r\n_server.httpServer = createHttpServer((request, response) => {\r\n    _server.unifiedServer(request, response);\r\n});\r\n\r\n/**\r\n * Birleşik sunucu metodu\r\n * @param {string} request İstemciden gelen istek\r\n * @param {string} response Sunucudan verilen yanıt\r\n */\r\n_server.unifiedServer = (request, response) => {\r\n    /**\r\n     * Url ayrıştırma işlemi (obje olarak alıyoruz)\r\n     * * Örnek: *{... query: {}, pathname: \"/ornek\" ... } şeklinde bir url classı*\r\n     */\r\n    const parsingUrl = parseUrl(request.url, true);\r\n\r\n    /**\r\n     * Sorgu kelimesini (query string) obje olarak almak.\r\n     * * Örnek: *\"curl localhost:3000/foo?test=testtir\" ise { test : \"testtir\" }*\r\n     * * Not: *\"?test=testtir\" sorgu dizgisidir.*\r\n     */\r\n    const queryStringObject = parsingUrl.query;\r\n\r\n    /**\r\n     * Ayrıştırılan urldeki pathname değişkenindeki değeri yol'a alıyorz.\r\n     * * Örnek: *\"curl localhost:3000/ornek/test/\" => yolu \"/ornek/test/\"*\r\n     * * Not: *sorgu dizgileri ele alınmaz ( \"curl localhost:3000/ornek?foo=bar\" => yolu \"/ornek\" )*\r\n     */\r\n    const path = parsingUrl.pathname;\r\n\r\n    /**\r\n     * Replace içinde verilen işaretler çıkartılarak alınan yol.\r\n     * * Örnek: *[\"/ornek\" -> \"ornek\"] veya [\"/ornek/test/\" -> \"ornek/test/\"] olarak kırpılmakta.*\r\n     * * Not: *Sadece ilk karakter kırpılıyor (?)*\r\n     */\r\n    const trimmedPath = path.replace(/^\\/+|\\+$/g, \"\");\r\n\r\n    /**\r\n     * HTTP metodu alma\r\n     * * Örnek: *GET, POST, PUT, DELETE ...*\r\n     * * Not: *Küçük harfe çevirip alıyoruz.*\r\n     */\r\n    const method = request.method.toLowerCase();\r\n\r\n    /**\r\n     * İsteğin içindeki başlıkları (header keys) obje olarak almak.\r\n     * * Not: *Postman ile headers sekmesinde gönderilen anahtarları (keys)\r\n     * ve değerlerini (the value of them) içerir.*\r\n     */\r\n    const headers = request.headers;\r\n\r\n    /**\r\n     * ASCI kodlarını çözümlemek için kod çözücü tanımlama\r\n     * * Not: *\"utf-8\" çözümleme yöntemidir*\r\n     */\r\n    const decoder = new stringDecoder(\"utf-8\");\r\n    // Yükleri kayıt edeceğimiz tamponu oluşturuyoruz.\r\n    let buffer = \"\";\r\n\r\n    // İstekte veri geldiği anda yapılacak işlemler\r\n    request.on(\"data\", data => {\r\n        /**\r\n         * ASCI kodlarını \"utf-8\" formatında çözümlüyoruz.\r\n         * * Ornek: *42 75 -> Bu [ 42 = B, 75 = u]*\r\n         */\r\n        buffer += decoder.write(data);\r\n    });\r\n\r\n    // İstek sonlandığı anda yapılacak işlemler\r\n    request.on(\"end\", () => {\r\n        // Kod çözümlemeyi kapatıyoruz.\r\n        buffer += decoder.end();\r\n\r\n        /**\r\n         * İşleyiciye gönderilen veri objesi oluşturma\r\n         * * Not: *Her dosyada kullanılan veri objesidir.*\r\n         * * Örnek: *{ \"kırpılmışYol\" = \"ornek\", \"sorguDizgisiObjeleri\" = {}, \"metot\" = \"post\",\r\n         *   \"yükler\" = {\"isim\" : \"Yunus Emre\"} [Body içindeki metinler] vs.}*\r\n         */\r\n        const requestData = {\r\n            trimmedPath: trimmedPath,\r\n            queryStringObject: queryStringObject,\r\n            method: method,\r\n            headers: headers,\r\n            payload: JSONtoObject(buffer)\r\n        };\r\n\r\n        // Yanıt oluşturma\r\n        _server.createResponse(requestData, response);\r\n    });\r\n};\r\n\r\n/**\r\n * Sunucu tarafından verilecek yanıtı oluşturma\r\n * @param {object} requestData İstek verileri\r\n * @param {string} response Yanıt dizgisi\r\n */\r\n_server.createResponse = (requestData, response) => {\r\n    // Seçilmiş işleyiciyi ayarlama\r\n    const chosenHandler = requestData.trimmedPath.includes('.') ? asset :\r\n        requestData.trimmedPath.includes('api/') ? api : template;\r\n\r\n    /* const chosenHandler = requestData.trimmedPath.includes('public/') | requestData.trimmedPath.includes('favicon.ico') ? asset :\r\n        requestData.trimmedPath.includes('api/') ? api : template;\r\n        */\r\n\r\n    chosenHandler(requestData, (statusCode, payload, contentType) => {\r\n        // Değişkenleri düzenleme\r\n        statusCode = fixStatusCode(statusCode);\r\n        contentType = fixContentType(contentType);\r\n\r\n        // Yanıt için başlıkları ayarlama\r\n        response.setHeader(\"Content-Type\", contentTypes[contentType]);\r\n\r\n        // Yük dizgisini ayarlama\r\n        const payloadString = fixPayload(contentType, payload);\r\n\r\n        // Yanıt için durum kodunu ve geri dönüş yüklerini ayarlama\r\n        response.writeHead(statusCode);\r\n        response.end(payloadString);\r\n\r\n        // Yanıt hakkında bilgi gösterme (debug)\r\n        _server.showResponseInfos(statusCode, requestData);\r\n    });\r\n};\r\n\r\n/**\r\n * Sunucu yanıtı hakkında bilgilendirme\r\n * @param {number} statusCode Sunucu durum kodu\r\n * @param {object} requestData Sunucuya gönderilen istek verisi\r\n */\r\n_server.showResponseInfos = (statusCode, requestData) => {\r\n    // İşlem yanıtı olumlu ise yeşil, değilse kırmızı yazma\r\n    if (statusCode == 200) {\r\n        debug(\"\\x1b[32m%s\\x1b[0m\", `${requestData.method} /${requestData.trimmedPath} ${statusCode}`);\r\n    } else {\r\n        debug(\"\\x1b[31m%s\\x1b[0m\", `${requestData.method} /${requestData.trimmedPath} ${statusCode}`);\r\n    }\r\n}"]}