{"version":3,"sources":["../../lib/data.js"],"names":["getBasePath","getDirPath","getFilePath","createData","readData","updateData","deleteData","debug","_data","__dirname","dir","fileName","fileType","data","callback","createDir","err","fileDescriptor","dataString","JSON","stringify","writeFile","dataObject"],"mappings":"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","file":"data.js","sourcesContent":["// Bağımlılıklar\r\nimport { readFile, open, writeFile, close, ftruncate, unlink, existsSync, mkdirSync } from 'fs';\r\nimport { join } from 'path';\r\nimport { JSONtoObject } from './helpers/defaults';\r\nimport { debuglog } from 'util';\r\n\r\n// Hata ayıklama mesajı\r\nconst debug = debuglog(\"data\");\r\n\r\nconst _data = {};\r\n\r\n/**\r\n * Ana dizini alma\r\n * @return {string} Ana dizin\r\n */\r\nexport function getBasePath() {\r\n    return join(__dirname, \"/../database/\");\r\n}\r\n\r\n/**\r\n * Dosya dizni alma\r\n * @param {string} dir Dosyanın bulunduğu dizinin ismi\r\n * @return {string} Dosya dizininin yolu\r\n */\r\nexport function getDirPath(dir) {\r\n    return `${getBasePath()}${dir}`;\r\n}\r\n\r\n/**\r\n * Dosyanın yolunu alma\r\n * @param {string} dir Dosyanın bulunduğu dizin\r\n * @param {string} fileName Dosyanın ismi\r\n * @param {string} fileType Dosyanın türü (uzantısı)\r\n * @return {string} Dosya yolu\r\n */\r\nexport function getFilePath(dir, fileName, fileType) {\r\n    return `${getDirPath(dir)}\\\\${fileName}.${fileType}`;\r\n}\r\n\r\n/**\r\n * Veri oluşturma\r\n * @param {string} dir Dosyanın oluşturulacağı dizin / klasör ismi\r\n * @param {string} fileName Verilerin içinde bulunacağı dosya'nın ismi *(kimlik)*\r\n * @param {object} data Dosyaya kayıt edilecek veri\r\n * @param {function(boolean, string):void} callback İşlemler bittiği zaman verilen yanıt\r\n ** arg0: İşlem sırasında oluşan hata, yoksa false\r\n */\r\nexport function createData(dir, fileName, data, callback) {\r\n    _data.createDir(dir);\r\n\r\n    // Dosyayı yazmak için açma\r\n    open(getFilePath(dir, fileName, 'json'), 'wx', (err, fileDescriptor) => {\r\n        // Hata yok ve dosya tanımlayıcısı varsa\r\n        if (!err && fileDescriptor) {\r\n            // Veriyi dizgiye çeviriyoruz\r\n            const dataString = JSON.stringify(data);\r\n\r\n            // Dosyaya veriyi yazma\r\n            _data.writeFile(fileDescriptor, dataString, callback);\r\n\r\n        } else {\r\n            callback('Dosya oluşturulamadı, zaten mevcut olabilir :(');\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Veri okuma\r\n * @param {string} dir Dosyanın okunacağı dizin / klasör ismi\r\n * @param {string} fileName Verilerin içinde bulunacağı dosya'nın ismi *(kimlik)*\r\n * @param {function(string | boolean, object):void} callback İşlemler bittiği zaman verilen yanıt\r\n ** arg0: İşlem sırasında oluşan hata (yoksa false)\r\n ** arg1: Okunmak istenen veri / dosya\r\n */\r\nexport function readData(dir, fileName, callback) {\r\n    readFile(getFilePath(dir, fileName, 'json'), \"utf8\", (err, data) => {\r\n        // Eğer hata yok ve veri varsa\r\n        if (!err && data) {\r\n            // JSON'u objeye dönüştürüyoruz\r\n            const dataObject = JSONtoObject(data);\r\n\r\n            // Veriyi ve hata olmadığını geri çağırma\r\n            callback(false, dataObject);\r\n        } else {\r\n            // Hata varsa, hatayı ve veriyi geri çağırma\r\n            callback('Dosya okumada hata meydana geldi :(', data);\r\n            debug(\r\n                \"\\x1b[31m%s\\x1b[0m\",\r\n                \"Dosya okumada hata meydana geldi :(\\n\\t\\t\" + err\r\n            );\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Verileri güncelleme metodu\r\n *\r\n * @param {string} dir Dosyanın oluşturulacağı dizin / klasör ismi\r\n * @param {string} fileName Güncellenecek dosyanın ismi *(kimliği)*\r\n * @param {object} data Dosyaya kayıt edilecek veri\r\n * @param {function(boolean, string):void} callback İşlemler bittiği zaman verilen yanıt\r\n ** arg0: İşlem sırasında oluşan hata, yoksa false\r\n */\r\nexport function updateData(dir, fileName, data, callback) {\r\n    // Dosyayı açma\r\n    open(getFilePath(dir, fileName, 'json'), 'r+', (err, fileDescriptor) => {\r\n        if (!err && fileDescriptor) {\r\n            // JSON'u string yapıyoruz\r\n            const dataString = JSON.stringify(data);\r\n\r\n            // Dosyayı kırpma\r\n            ftruncate(fileDescriptor, err => {\r\n                if (!err) {\r\n                    // Dosyayı güncelleme\r\n                    _data.writeFile(fileDescriptor, dataString, callback);\r\n                    debug(\r\n                        \"\\x1b[32m%s\\x1b[0m\",\r\n                        \"Dosya güncelleme başarılı :).\\n\\t\\t\" + getFilePath(dir, fileName, 'json'),\r\n                    );\r\n                } else {\r\n                    callback('Dosya kırpmada hata meydana geldi :(');\r\n                    debug(\r\n                        \"\\x1b[31m%s\\x1b[0m\",\r\n                        \"Dosya kırpmada hata meydana geldi :(.\\n\\t\\t\" + err\r\n                    );\r\n                }\r\n            });\r\n        } else {\r\n            callback('Güncellenecek dosya bulunamadı :(');\r\n            debug(\r\n                \"\\x1b[31m%s\\x1b[0m\",\r\n                \"Güncellenecek dosya bulunamadı :(.\\n\\t\\t\" + err\r\n            );\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Veriyi silmek\r\n *\r\n * @param {string} dir Dosyanın bulunduğu dizin\r\n * @param {string} fileName Verilerin içinde bulunacağı dosya'nın ismi *(kimlik)*\r\n * @param {function(boolean, string):void} callback İşlemler bittiği zaman verilen yanıt\r\n ** arg0: İşlem sırasında oluşan hata, yoksa false\r\n */\r\nexport function deleteData(dir, fileName, callback) {\r\n    // Dosya bağlantısını kaldırma\r\n    unlink(getFilePath(dir, fileName, 'json'), err => {\r\n        if (!err) {\r\n            callback(false);\r\n        } else {\r\n            callback('Veri silinirken hata meydana geldi :(');\r\n        }\r\n    });\r\n}\r\n\r\n\r\n/**\r\n * Dosyaya yazma\r\n * @param {object} fileDescriptor Dosya tanımlayıcısı\r\n * @param {string} dataString Veri dizgisi\r\n * @param {function(boolean, string):void} callback Geri çağırma\r\n * * args0: İşlemler sırasında oluşan hata, yoksa false\r\n */\r\n_data.writeFile = (fileDescriptor, dataString, callback) => {\r\n    writeFile(fileDescriptor, dataString, err => {\r\n        if (!err) {\r\n            close(fileDescriptor, err => {\r\n                if (!err) {\r\n                    callback(false);\r\n                } else {\r\n                    callback('Dosyayı kapatırken hata meydana geldi :(');\r\n                }\r\n            });\r\n        } else {\r\n            callback('Dosya yazma işleminde hata meydana geldi :(');\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Gereken dizinlerin oluşturulması\r\n * @param {string} dir Dizin ismi\r\n */\r\n_data.createDir = (dir) => {\r\n    // Ana dizin yoksa oluşturma\r\n    if (!existsSync(getBasePath())) {\r\n        mkdirSync(getBasePath());\r\n    }\r\n    if (!existsSync(getDirPath(dir))) {\r\n        mkdirSync(getDirPath(dir));\r\n    }\r\n}"]}