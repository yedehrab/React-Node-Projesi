{"version":3,"sources":["../../../lib/helpers/templates.js"],"names":["getFullTemplate","getTemplate","getPublicAsset","getStaticAsset","figureContentType","debug","_publicDir","__dirname","templateDir","callback","split","fileName","length","err","templateString","_addUniversalTemplates","fullTamplateString","_interpolateKeys","string","headerString","footerString","assetPath","data","keysString","keysData","keyName","templateGlobals","hasOwnProperty","key","replace","find","assetName","includes"],"mappings":"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","file":"templates.js","sourcesContent":["import { fixString } from \"./fixers\";\r\nimport { readFile } from 'fs';\r\nimport { join } from \"path\";\r\nimport { debuglog } from 'util';;\r\nimport { templateGlobals } from \"../config\";\r\nimport { JSONtoObject } from \"./defaults\";\r\n\r\n// Hata ayıklama modundaki (debug mode) mesajları göstermek için kullanılacak \r\nconst debug = debuglog('templates');\r\n\r\n// Kalıpların yolu\r\nconst _publicDir = join(__dirname, '/../../public/');\r\n\r\n/**\r\n * Sayfa kalıbının dizgisine anahtar verilerini ve header - footer verilerini iliştirir\r\n * @param {string} templateDir Kalıbın dizini\r\n * @param {function(boolean | string, string=)} callback İşlemler bittiği zaman geri çağırılan metot\r\n * * arg0: *Varsa hata mesajı yoksa false*\r\n * * arg1: *Kalıb dizgisi (hata varsa undefined)*\r\n */\r\nexport function getFullTemplate(templateDir, callback) {\r\n    // Kalıp yolunu düzeltme\r\n    templateDir = fixString(templateDir);\r\n    if (templateDir) {\r\n        // Dosya yolunu alma (uzantısız)\r\n        const split = templateDir.split('/');\r\n        const fileName = templateDir + '/' + split[split.length - 1];\r\n\r\n        getPublicAsset(fileName + '.html', (err, templateString) => {\r\n            if (!err && templateString) {\r\n                _addUniversalTemplates(templateString, (err, fullTamplateString) => {\r\n                    if (!err && fullTamplateString) {\r\n                        _interpolateKeys(fullTamplateString, fileName, string => {\r\n                            callback(false, string);\r\n                        });\r\n                    } else {\r\n                        // Evrensel kalıplar eklenemedi\r\n                        callback('Evrensel kalıplar eklenemedi');\r\n                    }\r\n                });\r\n            } else {\r\n                // HTML alınamadı\r\n                callback('HTML alınamadı');\r\n            }\r\n        });\r\n    } else {\r\n        // Düzenle\r\n        callback('Dizin geçersiz');\r\n    }\r\n}\r\n\r\n/**\r\n * Sayfa kalıbının digisine anahtar verilerini verilerini iliştirir\r\n * @param {string} templateDir Kalıbın dizini\r\n * @param {function(boolean | string, string=)} callback İşlemler bittiği zaman geri çağırılan metot\r\n * * arg0: *Varsa hata mesajı yoksa false*\r\n * * arg1: *Kalıb dizgisi (hata varsa undefined)*\r\n */\r\nexport function getTemplate(templateDir, callback) {\r\n    // Kalıp yolunu düzeltme\r\n    templateDir = fixString(templateDir);\r\n    if (templateDir) {\r\n        // Dosya yolunu alma (uzantısız)\r\n        const split = templateDir.split('/');\r\n        const fileName = templateDir + '/' + split[split.length - 1];\r\n\r\n        getPublicAsset(fileName + '.html', (err, templateString) => {\r\n            if (!err && templateString) {\r\n                _interpolateKeys(templateString, fileName, string => {\r\n                    callback(false, string);\r\n                });\r\n            } else {\r\n                // HTML alınamadı\r\n                callback('HTML alınamadı');\r\n            }\r\n        });\r\n    } else {\r\n        // Düzenle\r\n        callback('Dizin geçersiz');\r\n    }\r\n}\r\n\r\n/**\r\n * GUI için gereken HTML kalıbına alt ve üst bilgi kalıbını ekler\r\n * @param {string} templateString Evrensel kalıpların ekleneceği kalıp dizgisi\r\n * @param {function (string | boolean , string): void} callback İşlemler bittiği zaman verilen yanıt\r\n ** arg0: *İşlem sırasında oluşan hatanın açıklaması (hata yoksa false)*\r\n ** arg0: *Evrensel kalıpların eklendiği kalıp dizgisi*\r\n */\r\nconst _addUniversalTemplates = (templateString, callback) => {\r\n    // Kalıp dizgisini düzeltme\r\n    templateString = fixString(templateString, true);\r\n\r\n    // Üstbilgi kalıbını alma\r\n    getPublicAsset('header.html', (err, headerString) => {\r\n        if (!err && headerString) {\r\n            // Altbilgi kalıbını alma\r\n            getPublicAsset('footer.html', (err, footerString) => {\r\n                if (!err && footerString) {\r\n                    // Evrensel kalıpları ekleyip geri çağırma\r\n                    callback(false, headerString + templateString + footerString);\r\n                } else {\r\n                    callback('Altbilgi kalıbı bulunamadı :(');\r\n                }\r\n            });\r\n        } else {\r\n            callback('Üstbilgi kalıbı bulunamadı :(');\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Public dosyasındaki varlıkları alma\r\n * @param {stirng} assetPath İstenen varlığın yolu\r\n * @param {function(boolean | string, string=):void} callback Geriçağırma\r\n * * args0: Varsa hata mesajı, yoksa false\r\n * * args1: İstenilen varlık verisi\r\n */\r\nexport function getPublicAsset(assetPath, callback) {\r\n    // Genel varlık ismini düzeltme\r\n    assetPath = fixString(assetPath);\r\n    if (assetPath) {\r\n        readFile(_publicDir + assetPath, 'utf8', (err, data) => {\r\n            if (!err && data) {\r\n                // Geri çağırma\r\n                callback(false, data);\r\n            } else if (err) {\r\n                debug('\\x1b[33m%s\\x1b[0m', `'${assetPath}' okunurken hata oluştu: ${err}`);\r\n                callback('Yol okunurken hata oluştu :(');\r\n            } else {\r\n                debug('\\x1b[33m%s\\x1b[0m', `'${assetPath}' içinde veri bulunmamakta`);\r\n                callback('Okunan verinin içi boş :(');\r\n            }\r\n        });\r\n    } else {\r\n        debug('\\x1b[31m%s\\x1b[0m', `'${assetPath}' geçerli bir yol değil :(`);\r\n        callback('Varlık yolu geçerli bir dizgi değil :(');\r\n    }\r\n}\r\n\r\n/**\r\n * Public dosyasındaki varlıkları alma\r\n * @param {stirng} assetPath İstenen varlığın yolu\r\n * @param {function(boolean | string, string=):void} callback Geriçağırma\r\n * * args0: Varsa hata mesajı, yoksa false\r\n * * args1: İstenilen varlık verisi\r\n */\r\nexport function getStaticAsset(assetPath, callback) {\r\n    // Genel varlık ismini düzeltme\r\n    assetPath = fixString(assetPath);\r\n    if (assetPath) {\r\n        readFile(_publicDir + assetPath, (err, data) => {\r\n            if (!err && data) {\r\n                // Geri çağırma\r\n                callback(false, data);\r\n            } else if (err) {\r\n                debug('\\x1b[33m%s\\x1b[0m', `'${assetPath}' okunurken hata oluştu: ${err}`);\r\n                callback('Yol okunurken hata oluştu :(');\r\n            } else {\r\n                debug('\\x1b[33m%s\\x1b[0m', `'${assetPath}' içinde veri bulunmamakta`);\r\n                callback('Okunan verinin içi boş :(');\r\n            }\r\n        });\r\n    } else {\r\n        debug('\\x1b[31m%s\\x1b[0m', `'${assetPath}' geçerli bir yol değil :(`);\r\n        callback('Varlık yolu geçerli bir dizgi değil :(');\r\n    }\r\n}\r\n\r\n// Düzenle\r\nconst _interpolateKeys = (string, fileName, callback) => { // Direk getPublicAsset siz yap\r\n    // Anahtarların verilerini alma\r\n    getPublicAsset(fileName + '.json', (err, keysString) => {\r\n        // Anahtarların verilerini ayarları\r\n        const keysData = !err ? JSONtoObject(keysString) : {};\r\n\r\n        // Dosyaya özgü anahtar verileri ayarlama\r\n        keysData['head.script'] = fileName;\r\n        keysData['head.style'] = fileName;\r\n\r\n        // Evrensel kalıp anahtarlarını da anahtar verilerine ekliyoruz\r\n        for (let keyName in templateGlobals) {\r\n            // Eğer anahtar ismine ait bir özelliğe sahipse, o değeri anahtar verilerine ekleme\r\n            if (templateGlobals.hasOwnProperty(keyName)) {\r\n                keysData[`global.${keyName}`] = templateGlobals[keyName];\r\n            }\r\n        }\r\n\r\n        // Her bir anahtar verisini, aldığımız kalıp dizgisinde uygun yerlere koyuyoruz\r\n        for (let key in keysData) {\r\n            if (keysData.hasOwnProperty(key) && typeof keysData[key] == 'string') {\r\n                // Anahtarları bulma ve değiştirme\r\n                const replace = keysData[key];\r\n                const find = `{${key}}`;\r\n\r\n                // Dizgiyi güncelleme\r\n                string = string.replace(find, replace);\r\n            }\r\n        }\r\n        \r\n        // Geri çağırma\r\n        callback(string);\r\n    });\r\n};\r\n\r\n/**\r\n * Varlık isminin uzantısına göre içerik türüne karar verme\r\n * @param {string} assetName Varlık ismi\r\n * @return {string} Varlığın içerik türü\r\n */\r\nexport function figureContentType(assetName) {\r\n    if (assetName.includes('.css')) {\r\n        return 'css';\r\n    } else if (assetName.includes('.png')) {\r\n        return 'png';\r\n    } else if (assetName.includes('.jpg')) {\r\n        return 'jpg';\r\n    } else if (assetName.includes('.ico')) {\r\n        return 'favicon';\r\n    } else if (assetName.includes('.js')) {\r\n        return 'js';\r\n    }\r\n    return 'plain';\r\n}"]}