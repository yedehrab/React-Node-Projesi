{"version":3,"sources":["../../../lib/helpers/defaults.js"],"names":["JSONtoObject","hash","createRandomID","str","object","JSON","parse","e","update","digest","idSize","possibleChars","id","i","randomChar","charAt","Math","floor","random","length","contentTypes","json","js","html","css","plain","favicon","png","jpg"],"mappings":";;;;;;QAUgBA,Y,GAAAA,Y;QAcAC,I,GAAAA,I;QAgBAC,c,GAAAA,c;;AAvChB;;AACA;;AAGA;;;;;AALA;AAUO,SAASF,YAAT,CAAsBG,GAAtB,EAA2B;AAC9B,QAAI;AACA,cAAMC,SAASC,KAAKC,KAAL,CAAWH,GAAX,CAAf;AACA,eAAOC,MAAP;AACH,KAHD,CAGE,OAAOG,CAAP,EAAU;AACR,eAAO,EAAP;AACH;AACJ;;AAED;;;;;AAKO,SAASN,IAAT,CAAcE,GAAd,EAAmB;AACtBA,UAAM,uBAAUA,GAAV,CAAN;AACA,QAAIA,GAAJ,EAAS;AACL,eAAO,wBAAW,QAAX,EACFK,MADE,CACKL,GADL,EAEFM,MAFE,CAEK,KAFL,CAAP;AAGH,KAJD,MAIO;AACH,eAAO,KAAP;AACH;AACJ;;AAED;;;;;AAKO,SAASP,cAAT,CAAwBQ,MAAxB,EAAgC;AACnC;AACAA,aAAS,uBAAUA,MAAV,CAAT;AACA,QAAIA,MAAJ,EAAY;AACR;AACA,cAAMC,gBAAgB,sCAAtB;;AAEA;AACA,YAAIC,KAAK,EAAT;;AAEA;AACA,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,MAApB,EAA4BG,GAA5B,EAAiC;AAC7B,gBAAIC,aAAaH,cAAcI,MAAd,CACbC,KAAKC,KAAL,CAAWD,KAAKE,MAAL,KAAgBP,cAAcQ,MAAzC,CADa,CAAjB;AAGAP,kBAAME,UAAN;AACH;;AAED,eAAOF,EAAP;AACH,KAhBD,MAgBO;AACH,eAAO,KAAP;AACH;AACJ;;AAGD;;;AAGO,MAAMQ,sCAAe;AACxBC,UAAM,kBADkB;AAExBC,QAAI,wBAFoB;AAGxBC,UAAM,WAHkB;AAIxBC,SAAK,UAJmB;AAKxBC,WAAO,YALiB;AAMxBC,aAAS,cANe;AAOxBC,SAAK,WAPmB;AAQxBC,SAAK;AARmB,CAArB","file":"defaults.js","sourcesContent":["// Bağımlılıklar\r\nimport { fixString, fixNumber } from \"./fixers\";\r\nimport { createHash } from \"crypto\";\r\n\r\n\r\n/**\r\n * Json'u objeye dönüştürme (parsing)\r\n * @param {string} str Dönüştürülecek json verisi\r\n * @return {object} JSON objesi | { } (boş obje)\r\n */\r\nexport function JSONtoObject(str) {\r\n    try {\r\n        const object = JSON.parse(str);\r\n        return object;\r\n    } catch (e) {\r\n        return {};\r\n    }\r\n}\r\n\r\n/**\r\n * Dizgiyi şifreleme (hashing)\r\n * @param {string} str Şifrelenecek dizgi\r\n * @return {string} Şifrelenmiş dizgi\r\n */\r\nexport function hash(str) {\r\n    str = fixString(str);\r\n    if (str) {\r\n        return createHash(\"sha256\")\r\n            .update(str)\r\n            .digest(\"hex\");\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n * Rastgele kimlik oluşturma\r\n * @param {number} idSize Kimlik uzunluğu\r\n * @return {boolean | string} Oluşturulan kimlik verisi\r\n */\r\nexport function createRandomID(idSize) {\r\n    // Kimlik uzunluğunu düzeltme\r\n    idSize = fixNumber(idSize);\r\n    if (idSize) {\r\n        // Olası karakterler\r\n        const possibleChars = \"abcdefghijklmnopqrstuvwxyz0123456789\";\r\n\r\n        // Oluşturalacak olan kimlik\r\n        let id = \"\";\r\n\r\n        // Rastgele olası harf olma ve ekleme\r\n        for (let i = 0; i < idSize; i++) {\r\n            let randomChar = possibleChars.charAt(\r\n                Math.floor(Math.random() * possibleChars.length)\r\n            );\r\n            id += randomChar;\r\n        }\r\n\r\n        return id;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Uzantı türlerine göre, başlık tipleri\r\n */\r\nexport const contentTypes = {\r\n    json: 'application/json',\r\n    js: 'application/javascript',\r\n    html: 'text/html',\r\n    css: 'text/css',\r\n    plain: 'text/plain',\r\n    favicon: 'image/x-icon',\r\n    png: 'image/png',\r\n    jpg: 'image/jpg',\r\n}"]}