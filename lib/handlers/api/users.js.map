{"version":3,"sources":["../../../../lib/handlers/api/users.js"],"names":["createUser","deleteUser","findUser","updateUser","debug","data","callback","username","payload","email","password","tosAgreement","err","includes","hashedPassword","userObject","Info","Detail","slice","length","queryStringObject","token","headers","userData","fullName","phone","succesMsg"],"mappings":"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","file":"users.js","sourcesContent":["// Bağımlılıklar\r\nimport { createData, readData, deleteData, updateData } from '../../data';\r\nimport { verifyToken } from './tokens';\r\nimport { hash } from '../../helpers/defaults';\r\nimport { fixFullName, fixUsername, fixPassword, fixEmail, fixTosAgreement, fixPhone } from '../../helpers/fixers';\r\nimport { debuglog } from 'util';\r\n\r\n// Hata ayıklama mesajları\r\nconst debug = debuglog('users');\r\n\r\n/**\r\n * Kullanıcı oluşturma metodu\r\n * * Gerekli Veriler: *username, email, password, tosAgreement*\r\n * * Not: *phone* kimlik yerine kullanılmaktadır.\r\n * * Kullanım şekli: *Yükler ile kullanılır (Body içindeki JSON verileri) (localhost:3000/users)*\r\n * @param {object} data Index.js\"te tanımlanan veri objesi. İstekle gelir.\r\n * @param {function(number, object):void} callback İşlemler bittiği zaman verilen yanıt\r\n ** arg0: HTTP varsayılan durum kodları\r\n ** arg1: Ek açıklamalar objesi {Info, ?Detail}\r\n */\r\nexport function createUser(data, callback) {\r\n    // Gerekli verileri kontrol etme ve düzenleme\r\n    const username = fixUsername(data.payload.username);\r\n    const email = fixEmail(data.payload.email);\r\n    const password = fixPassword(data.payload.password);\r\n    const tosAgreement = fixTosAgreement(data.payload.tosAgreement);\r\n\r\n    // Hata mesajı oluşturma\r\n    let err = \"Hatalı veya eksik alanlar: \";\r\n\r\n    if (!username)\r\n        err += \"Kullanıcı Adı, \";\r\n    if (!email)\r\n        err += \"Email, \";\r\n    if (!password)\r\n        err += \"Şifre, \";\r\n    if (!tosAgreement)\r\n        err += \"Koşul Kabulü, \";\r\n\r\n    // Eğer ',' içermezse hata yoktur\r\n    if (!err.includes(',')) {\r\n        // Hata yoksa, kullancının yeni olup olmadığını kontrol etme\r\n        readData('users', username, err => {\r\n            // Hata yoksa, kullanıcıyı oluşturma\r\n            if (err) {\r\n                // Şifreyi gizleme\r\n                const hashedPassword = hash(password);\r\n\r\n                // Şifre başarıyla gizlendiyse devam edeceğiz\r\n                if (hashedPassword) {\r\n                    // Kullanıcı objesi\r\n                    const userObject = {\r\n                        username: username,\r\n                        email: email,\r\n                        hashedPassword: hashedPassword,\r\n                        tosAgreement: tosAgreement\r\n                    };\r\n\r\n                    // Kullanıcı verisi oluşturma\r\n                    createData('users', username, userObject, err => {\r\n                        if (!err) {\r\n                            callback(200, {\r\n                                Info: 'Kullanıcı oluşturuldu :)',\r\n                            })\r\n                        } else {\r\n                            callback(500, {\r\n                                Info: 'Kullanıcı oluşturulamadı :(',\r\n                                Detail: err\r\n                            });\r\n                        }\r\n                    });\r\n                } else {\r\n                    callback(500, {\r\n                        Info: 'Kullanıcı şifresi gizlenemedi :('\r\n                    });\r\n                }\r\n            } else {\r\n                callback(400, {\r\n                    Info: 'Bu kullanıcı adı zaten kullanımda :('\r\n                });\r\n            }\r\n        });\r\n    } else {\r\n        // Son 2 karakteri kaldırma \", \" ve hatayı geri çağırma\r\n        callback(400, {\r\n            Info: err.slice(0, err.length - 2)\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Kullanıcı verileri güncelleme\r\n * * Gerekli Veriler: *username*\r\n * * Not: *Sadece kimliği onaylanmış kişiler, kendi bilgilerini değiştirebilir. (Diğerlerine erişemez)*\r\n * * Kullanım Şekli: *localhost:3000/kullanıcılar?telefonNo=... (Sorgu Verisi)*\r\n * @param {object} data Index.js\"te tanımlanan veri objesi. İstekle gelir.\r\n * @param {function(number, object):void} callback İşlemler bittiği zaman verilen yanıt\r\n ** arg0: HTTP varsayılan durum kodları\r\n ** arg1: Ek bilgiler, açıklamalar\r\n */\r\nexport function deleteUser(data, callback) {\r\n    // Telefon numarasını kontrol edip, düzenliyoruz\r\n    const username = fixUsername(data.queryStringObject.username);\r\n    const password = fixPassword(data.payload.password);\r\n\r\n    // Telefon numarası geçerliyse devam edeceğiz\r\n    if (username) {\r\n        // Oturum Onaylama\r\n        const token = typeof(data.headers.token) == 'string' ? data.headers.token : false;\r\n        verifyToken(token, username, err => {\r\n            // Hata yoksa, kullanıcıyı silme işlemini deniyoruz\r\n            if (!err) {\r\n                // Kullanıcıyı kayıtlarda bulma\r\n                readData('users', username, (err, userData) => {\r\n                    if (!err) {\r\n                        if (hash(password) == userData.hashedPassword) {\r\n                            deleteData('users', username, err => {\r\n                                if (!err) {\r\n                                    callback(200, {\r\n                                        Info: 'Kullanıcı başarıyla silindi :)'\r\n                                    })\r\n                                } else {\r\n                                    callback(500, {\r\n                                        Info: 'Kullanıcı silinemedi :(',\r\n                                        Detail: err\r\n                                    })\r\n                                }\r\n                            });\r\n                        } else {\r\n                            callback(400, {\r\n                                Info: \"Şifre doğru değil :(\"\r\n                            });\r\n                        }\r\n                    } else {\r\n                        callback(404, {\r\n                            Info: 'Silinecek kullanıcı bulunamadı veya hata meydana geldi :(',\r\n                            Detail: err\r\n                        });\r\n                    }\r\n                });\r\n            } else {\r\n                callback(401, {\r\n                    Info: err\r\n                });\r\n            }\r\n        });\r\n    } else {\r\n        callback(400, {\r\n            Info: 'Telefon numarası geçerli değil :('\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Kullanıcı girişi\r\n * * Gerekli Veriler: *username*\r\n * * Not: *Sadece kimliği onaylanmış kişiler, kendi biligilerine erişebilir. (Diğerlerine erişemez)*\r\n * * Kullanım Şekli: *localhost:3000/kullanıcılar?telefonNo=... (Sorgu Verisi)*\r\n * @param {object} data Index.js\"te tanımlanan veri objesi. İstekle gelir.\r\n * @param {function(number, object):void} callback İşlemler bittiği zaman verilen yanıt\r\n ** arg0: HTTP varsayılan durum kodları\r\n ** arg1: Kullanıcı bilgileri, ek bilgiler veya açıklamalar\r\n */\r\nexport function findUser(data, callback) {\r\n    // Kullanıcı adı verisini düzenleyip alma\r\n    const username = fixUsername(data.queryStringObject.username);\r\n\r\n    // Eğer kullanıcı adı geçerliyse, oturumu kontrol edeceğiz\r\n    if (username) {\r\n        // Oturumu verisini düzenleyip alma ve kontrol etme\r\n        const token = typeof data.headers.token == 'string' ? data.headers.token : false;\r\n        verifyToken(token, username, err => {\r\n            // Oturum onaylandıysa kullanıcı bilgilerini alacağız\r\n            if (!err) {\r\n                // Kullanıcı dosyasından kullanıcıyı arıyoruz\r\n                readData('users', username, (err, userData) => {\r\n                    // Hata yok ve kullanıcı verisi var ise kullanıcıyı geri döndüreceğiz\r\n                    if (!err && userData) {\r\n                        // Gizlenmiş şifreyi kaldırıyoruz\r\n                        delete userData.hashedPassword;\r\n\r\n                        callback(200, userData);\r\n                    } else {\r\n                        callback(404, {\r\n                            Info: 'Kullanıcı bulunamadı :(',\r\n                            Detail: err\r\n                        });\r\n                    }\r\n                });\r\n            } else {\r\n                callback(401, {\r\n                    Info: err,\r\n                }, 'json');\r\n            }\r\n        });\r\n    } else {\r\n        callback(400, {\r\n            Info: 'Kullanıcı adı geçerli değil :('\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Kullanıcı verileri güncelleme\r\n * * Gerekli veriler: *username*\r\n * * Not: *Sadece kimliği onaylanmış kişiler, kendi bilgilerini değiştirebilir. (Diğerlerine erişemez)*\r\n * * Kullanım şekli: *Yükler ile kullanılır (Bzody içindeki JSON verileri) (localhost:3000/kullanicilar)*\r\n * @param {object} data Index.js\"te tanımlanan veri objesi. İstekle gelir.\r\n * @param {function(number, object):void} callback İşlemler bittiği zaman verilen yanıt\r\n ** arg0: HTTP varsayılan durum kodları\r\n ** arg1: Ek bilgiler, açıklamalar\r\n */\r\nexport function updateUser(data, callback) {\r\n    // Gerekli verileri kontrol etme ve düzenleme\r\n    const username = fixUsername(data.payload.username);\r\n    const fullName = fixFullName(data.payload.fullName);\r\n    const email = fixEmail(data.payload.email);\r\n    const phone = fixPhone(data.payload.phone);\r\n    const password = fixPassword(data.payload.password);\r\n\r\n    // Veriler istendiği gibi ise diğer verileri kontrol ediyoruz\r\n    if (username) {\r\n        if (fullName || phone || password || email) {\r\n            // Oturum belirtecini kontrol etme\r\n            const token = typeof(data.headers.token) == 'string' ? data.headers.token : false;\r\n            verifyToken(token, username, err => {\r\n                // Hata yoksa güncellenecek kullancıyı arama\r\n                if (!err) {\r\n                    // Kullanıcıyı arıyoruz\r\n                    readData('users', username, (err, userData) => {\r\n                        // Hata yoksa ve kullanıcı objesi boş değilse devam ediyoruz\r\n                        if (!err && userData) {\r\n                            // Başarı mesajı\r\n                            let succesMsg = \"Başarıyla güncellenen alanlar: \";\r\n                            if (fullName) {\r\n                                userData.fullName = fullName;\r\n                                succesMsg += 'İsim, '\r\n                            }\r\n                            if (email) {\r\n                                userData.email = email;\r\n                                succesMsg += 'Email, ';\r\n                            }\r\n                            if (password) {\r\n                                userData.hashedPassword = hash(password);\r\n                                succesMsg += 'Şifre, ';\r\n                            }\r\n                            if (succesMsg.includes(',')) {\r\n                                succesMsg = succesMsg.slice(0, succesMsg.length - 2);\r\n                            }\r\n\r\n                            // Verileri güncelleme\r\n                            updateData('users', username, userData, err => {\r\n                                if (!err) {\r\n                                    callback(200, {\r\n                                        Info: succesMsg\r\n                                    });\r\n                                } else {\r\n                                    callback(500, {\r\n                                        Info: 'Kullanıcı güncellenemedi :(',\r\n                                        Detail: err\r\n                                    });\r\n                                }\r\n                            });\r\n                        } else {\r\n                            callback(404, {\r\n                                Info: 'Kullanıcı bulunamadı :(',\r\n                                Detail: err\r\n                            });\r\n\r\n                            // Hata ayıklama\r\n                            debug(\r\n                                \"\\x1b[31m%s\\x1b[0m\",\r\n                                \"Kullanıcı bulunamadı :(\\n\\t\\t\" + err\r\n                            );\r\n                        }\r\n                    });\r\n                } else {\r\n                    callback(401, {\r\n                        Info: err\r\n                    });\r\n                }\r\n            });\r\n        } else {\r\n            callback(400, {\r\n                Info: 'Girilen hiçbir veri kabul edilebilir değil :('\r\n            });\r\n\r\n            // Hata ayıklama\r\n            debug(\r\n                \"\\x1b[31m%s%o\\x1b[0m\",\r\n                \"Değiştirilmek istenen hiçbir veri kabul edilebilir değil :(\\n\\t\\t\" +\r\n                \"Veriler: \", data.payload\r\n            );\r\n        }\r\n    } else {\r\n        callback(400, {\r\n            Info: 'Kullanıcı adı geçerli değil :('\r\n        });\r\n\r\n        // Hata ayıklama\r\n        debug(\r\n            \"\\x1b[31m%s\\x1b[0m\",\r\n            \"Kullanıcı adı geçerli değil :(\\n\\t\\t\" +\r\n            \"Kullanıcı Adı: \" + data.payload.username\r\n        );\r\n    }\r\n}"]}