{"version":3,"sources":["../../../../lib/handlers/api/tokens.js"],"names":["verifyToken","createToken","deleteToken","findToken","updateToken","token","username","callback","err","tokenData","timeout","Date","now","data","payload","password","includes","userData","hashedPassword","id","idLength","sessionTimeoutMs","Info","Detail","slice","length","queryStringObject","extend","errMsg"],"mappings":"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","file":"tokens.js","sourcesContent":["// Bağımlılıklar\r\nimport { fixUsername, fixPassword, fixId, fixExtend } from \"../../helpers/fixers\";\r\nimport { readData, createData, deleteData, updateData} from \"../../data\";\r\nimport { hash, createRandomID } from \"../../helpers/defaults\";\r\nimport { idLength, sessionTimeoutMs } from \"../../config\";\r\n\r\n/**\r\n * Belirteçleri onaylamak için kullanılan metot.\r\n * @param {string} token Onaylanacak belirtecin kimliği\r\n * @param {string} username Kullanıcı adı\r\n * @param {function(boolean):void} callback İşlemler bittiği zaman verilen yanıt\r\n ** arg0: Varsa hata mesajı yoksa false\r\n */\r\nexport function verifyToken(token, username, callback) {\r\n    if (token) {\r\n        // Beliteci dosyada bulma\r\n        readData('tokens', token, (err, tokenData) => {\r\n            if (!err && tokenData) {\r\n                // Belirteç verileri doğrulama\r\n                if (tokenData.username == username && tokenData.timeout > Date.now()) {\r\n                    callback(false);\r\n                } else {\r\n                    callback('Oturum onaylanamadı :(');\r\n                }\r\n            } else {\r\n                callback('Oturum bulunamadı :(');\r\n            }\r\n        });\r\n    } else {\r\n        callback('Oturum belirteci geçersiz :(');\r\n    }\r\n}\r\n\r\n/**\r\n * Belirteç oluşturma metodu\r\n * * Gerekli veriler: *username, password*\r\n * * Kullanım şekli: *Yükler ile kullanılır (Body içindeki JSON verileri) (localhost:3000/belitecler)*\r\n * @param {object} data Index.js\"te tanımlanan veri objesi. İstekle gelir.\r\n * @param {function(number, object):void} callback İşlemler bittiği zaman verilen yanıt\r\n ** arg0: HTTP varsayılan durum kodları\r\n ** arg1: Belirtec objesi veya ek bilgiler, açıklamalar\r\n */\r\nexport function createToken(data, callback) {\r\n    // Gerekli verileri kontrol etme\r\n    const username = fixUsername(data.payload.username);\r\n    const password = fixPassword(data.payload.password);\r\n\r\n    // Hata mesajı oluşturma\r\n    let err = \"Hatalı veya eksik alanlar: \";\r\n\r\n    if (!username)\r\n        err += \"Kullanıcı Adı, \";\r\n    if (!password)\r\n        err += \"Şifre, \";\r\n\r\n    // Eğer hata varsa, ',' içerir\r\n    if (!err.includes(',')) {\r\n        // Kullanıcıyı veriler arasında arama\r\n        readData('users', username, (err, userData) => {\r\n            if (!err && userData) {\r\n                // Eğer şifreler uyuşuyorsa oturum kotrolü\r\n                if (hash(password) == userData.hashedPassword) {\r\n                    // Hali hazırda oturum açık mı\r\n                    // readData('tokens', id, )\r\n\r\n                    // Oluşturulacak belirteç (oturum) verileri\r\n                    const tokenData = {\r\n                        id: createRandomID(idLength),\r\n                        username: username,\r\n                        timeout: Date.now() + sessionTimeoutMs\r\n                    }\r\n\r\n                    // Belirteç (oturum) oluşturma\r\n                    createData('tokens', tokenData.id, tokenData, err => {\r\n                        if (!err) {\r\n                            // Berliteci geri çağırma\r\n                            callback(200, {\r\n                                data: tokenData,\r\n                                Info: 'Oturum başarıyla oluşturuldu :)'\r\n                            });\r\n                        } else {\r\n                            callback(500, {\r\n                                Info: 'Oturum oluşturulamadı :(',\r\n                                Detail: err\r\n                            });\r\n                        }\r\n                    });\r\n                } else {\r\n                    callback(404, {\r\n                        Info: 'Belirten kullanıcı için girilen şifre yanlış :('\r\n                    });\r\n                }\r\n            } else {\r\n                callback(404, {\r\n                    Info: 'Belirtilen kullanıcı bulunamadı :(',\r\n                    Detail: err\r\n                });\r\n            }\r\n        });\r\n    } else {\r\n        // Son 2 karakteri kaldırma \", \" ve hatayı geri çağırma\r\n        callback(400, {\r\n            Info: err.slice(0, err.length - 2)\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Belirteç silme metodu\r\n * * Gerekli Veriler: *id*\r\n * * Kullanım Şekli: *localhost:3000/belirteçler?kimlik=... (Sorgu verisi)*\r\n * @param {object} data Index.js\"te tanımlanan veri objesi. İstekle gelir.\r\n * @param {function(number, object):void} callback İşlemler bittiği zaman verilen yanıt\r\n ** arg0: HTTP varsayılan durum kodları\r\n ** arg1: Ek bilgiler, açıklamalar\r\n */\r\nexport function deleteToken(data, callback) {\r\n    // Kimlik kontrolü\r\n    const id = fixId(data.queryStringObject.id);\r\n\r\n    // Kimlik geçerliyse devam edeceğiz\r\n    if (id) {\r\n        // Oturumu bulma\r\n        readData('tokens', id, (err, tokenData) => {\r\n            if (!err && tokenData) {\r\n                // Oturumu silme\r\n                deleteData('tokens', id, err => {\r\n                    if (!err) {\r\n                        callback(200, {\r\n                            Info: 'Başarıyla çıkış yapıldı :)'\r\n                        });\r\n                    } else {\r\n                        callback(500, {\r\n                            Info: 'Oturum kapatılamadı :(',\r\n                            Detail: err\r\n                        })\r\n                    }\r\n                });\r\n            } else {\r\n                callback(404, {\r\n                    Info: 'Kapatılacak oturum bulunamadı, zaten çıkış yapmışsınız :('\r\n                });\r\n            }\r\n        });\r\n    } else {\r\n        callback(400, {\r\n            Info: 'Oturum kapatmak için oturum kimliği geçersiz :('\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Belirteç (oturum) alma metodu\r\n * * Gerekli veriler: *id*\r\n * * Kullanım Şekli: *localhost:3000/belirteçler?kimlik=... (Sorgu verisi)*\r\n * @param {object} data Index.js\"te tanımlanan veri objesi. İstekle gelir.\r\n * @param {function(number, object):void} callback İşlemler bittiği zaman verilen yanıt\r\n ** arg0: HTTP varsayılan durum kodları\r\n ** arg1: Ek bilgiler, açıklamalar\r\n */\r\nexport function findToken(data, callback) {\r\n    // Kimlik kontorlü\r\n    const id = fixId(data.queryStringObject.id);\r\n\r\n    if (id) {\r\n        // Belirtec bulma\r\n        readData('tokens', id, (err, tokenData) => {\r\n            if (!err && tokenData) {\r\n                callback(200, tokenData)\r\n            } else {\r\n                callback(404, {\r\n                    Info: 'Aranan belirteç bulunmadı :('\r\n                });\r\n            }\r\n        });\r\n    } else {\r\n        callback(400, {\r\n            Info: 'Oturum kimliği geçerli değil :('\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Belirteç güncelleme meto\r\n * du\r\n * * Gerekli Veriler: *id, extend*\r\n * * Kullanım şekli: *Yükler ile kullanılır (Body içindeki JSON verileri) (localhost:3000/belirtecler)*\r\n * @param {object} data Index.js\"te tanımlanan veri objesi. İstekle gelir.\r\n * @param {function(number, object):void} callback İşlemler bittiği zaman verilen yanıt\r\n ** arg0: HTTP varsayılan durum kodları\r\n ** arg1: Ek bilgiler, açıklamalar\r\n */\r\nexport function updateToken(data, callback) {\r\n    // Gerekli verilerin kontorlü\r\n    const id = fixId(data.payload.id);\r\n    const extend = fixExtend(data.payload.extend);\r\n\r\n    // Hata mesajını oluşturma\r\n    let errMsg = 'Hatalı olan alanlar: ';\r\n    if (!id) {\r\n        errMsg += 'kimlik, ';\r\n    }\r\n    if (!extend) {\r\n        errMsg += 'süre uzatma, ';\r\n    }\r\n\r\n    // ',' içermezse hata yok demektir.\r\n    if (!errMsg.includes(',')) {\r\n        // Belirteç bulma\r\n        readData('tokens', id, (err, tokenData) => {\r\n            if (!err && tokenData) {\r\n                if (tokenData.timeout > Date.now()) {\r\n                    // Oturum süresini uzatma\r\n                    tokenData.timeout = Date.now() + sessionTimeoutMs;\r\n\r\n                    // Belirteci (oturumu) güncelleme\r\n                    updateData('tokens', id, tokenData, err => {\r\n                        if (!err) {\r\n                            callback(200, {\r\n                                Info: 'Oturum başarıyla güncellendi :)'\r\n                            });\r\n                        } else {\r\n                            callback(500, {\r\n                                Info: 'Oturum güncellenemedi :(',\r\n                                Detail: err\r\n                            });\r\n                        }\r\n                    });\r\n                } else {\r\n                    callback(401, {\r\n                        Info: 'Güncellenmek istenen oturum, sonlanmış :('\r\n                    });\r\n                }\r\n\r\n            } else {\r\n                callback(404, {\r\n                    Info: 'Güncellenecek oturum mevcut değil :('\r\n                });\r\n            }\r\n        });\r\n    } else {\r\n        callback(400, {\r\n            Info: errMsg.slice(0, errMsg.length - 2)\r\n        });\r\n    }\r\n\r\n}"]}